; tag::types[]
; An account identity.
account-identity = non-anonymous-identity

; Features might extend this.
account-role /= "owner"

; The attribute argument contains a list of all account features supported by
; the server.
account@attribute-arg = [ * uint ]

account-feature-arg = any
account-feature = uint / [uint, * account-feature-arg]
; end::types[]

; tag::create[]
; Create a new account.
account.create@param = {
    ; A name or description of the account. This does not have to be unique.
    ; The server is welcome to limit the name of a wallet in any ways it sees
    ; fit.
    ? 0 => tstr,

    ; An optional initial list of roles. The sender of this message will be
    ; included in the list of owners by default, even if the sender is listed
    ; in this list.
    ; The server MUST return an error if any role is not supported by any
    ; feature included in the account.
    ? 1 => {
        * non-anonymous-identity => [ * account-role ],
    },

    ; Required list of features and their arguments.
    ; The server MUST return an error if no features are selected; an account
    ; without features doesn't do anything and is an error.
    ; The server MUST return an error if a combination of features on an
    ; account is unsupported.
    2 => [ 1* account-feature ],

    ; Any other information pertinent to this account.
    * tstr => any,
}
account.create@return = {
    ; The account identity. Use this to contact the account directly.
    0 => account-identity,
}
; end::create[]

; tag::setDescription[]
; Sets the description of an account.
account.setDescription@param = {
    ; The identity of the account.
    0 => account-identity,

    ; The new name or description.
    1 => tstr,
}

account.account.setDescription@return = ()
; end::setDescription[]

; tag::listRoles[]
; List all the roles available for an account, based on its features.
account.listRoles@param = {
    ; The account to list identities available.
    0 => account-identity,
}

account.listRoles@return = {
    ; The list of roles available for identities.
    0 => [ * account-role ],
}
; end::listRoles[]

; tag::getRoles[]
; List the roles of an identity.
account.getRoles@param = {
    ; The account to get the roles of.
    0 => account-identity,

    ; The identity to get the roles from.
    1 => non-anonymous-identity / [ * non-anonymous-identity ],
}

account.getRoles@return = {
    ; The list of roles, per identity.
    0 => {
        identity => [ * account-role ],
    }
}
; end::getRoles[]

; tag::addRoles[]
; Add roles to an identity related to the account. Adding a role that is already
; set to an identity does nothing. The only role that must be defined all the
; time is the "owner". Other roles can be added by features and can be listed by
; calling the `account.listRoles` endpoint.
account.addRoles@param = {
    ; The account to add the role to.
    0 => account-identity,

    ; A map of identity with roles to add. These roles will be added to the
    ; identity, not replacing the ones it currently have.
    ? 1 => {
        * non-anonymous-identity => [ * account-role ],
    }
}
account.addRoles@return = ()
; end::addRoles[]

; tag::removeRoles[]
; Remove roles from an identity. If the role isn't set, this will do nothing.
account.removeRoles@param = {
    ; The account to add the role to.
    0 => account-identity,

    ; A map of identity with roles to remove from them.
    ? 1 => {
        * non-anonymous-identity => [ * account-role ],
    }
}
account.removeRoles@return = ()
; end::removeRoles[]

; tag::info[]
; Get the information of an account. Some information might be missing if the
; server desires it. For example, the server might restrict which identities
; can have the list of owners.
account.info@param = {
    ; The identity of the account to request the information of.
    0 => account-identity,
}
account.info@return = {
    ; The name or description of the wallet.
    ? 0 => tstr,

    ; The list of roles for the account.
    ? 1 => {
        * non-anonymous-identity => [ * account-role ],
    },

    ; The list of features and their argument.
    ? 2 => [ 1* account-feature ],
}
; end::info[]

; tag::delete[]
; Delete an account. Its identity cannot be reused.
; The server MUST return an error if the sender does not have the `"owner"` role
; for this account.
account.delete@param = {
    0 => account-identity,
}
account.delete@return = ()
; end::delete[]

; tag::addFeatures[]
; Add features and roles to an account, in one atomic call.
; The roles added by this call can only come from the new features
; added in this call.
; The server MUST return an error if roles added by this call aren't available
; to the features listed.
; The server MAY return an error if adding features to an account is not
; supported.
account.addFeatures@param = {
    ; The account to add features to.
    0 => account-identity,

    ; List of additional roles to add.
    ? 1 => {
        * non-anonymous-identity => [ * account-role ],
    }

    ; List of features to add and their arguments.
    ; The server MUST return an error if a feature is already available on the
    ; account.
    ; The server MUST return an error if a combination of features on an
    ; account is unsupported.
    2 => [ 1* account-feature ],
}
account.addFeatures@return = ()
; end::addFeatures[]
