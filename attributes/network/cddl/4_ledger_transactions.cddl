; tag::types[]
; A filter argument for transactions.
ledger-transaction-filter = {
    ; Filter by account affected.
    ? 0 => identity / [ * identity ],

    ; Filter by transaction type.
    ? 1 => ledger-transaction-type / [ * ledger-transaction-type ],

    ; Filter by symbol.
    ? 2 => ledger-symbol / [ * ledger-symbol ],

    ; Filter by transaction ID range.
    ? 3 => range<ledger-transaction-id>,

    ; Filter by date range.
    ? 4 => range<time>,
}

; An ID that is unique for all transactions. This must be monotonically incrementing
; between when transactions are executed.
; The system can consider this to be a `biguint` and add 1 to the last byte to gather
; the next item.
; Gaps between IDs can exist (they don't have to be continuous).
ledger-transaction-id = bstr

; Transaction types. This can be extended and the server MUST provide a list of
; those types.
; Extensible transaction info.
; TODO: namespace transaction types per attribute ID, somehow.
ledger-transaction-info /= ledger-transaction-send
ledger-transaction-type = ledger-transaction-type-send

ledger-transaction-type-send = 0

ledger-transaction-send = [
    ledger-transaction-type-send,
    identity,      ; FROM
    identity,      ; TO
    ledger-symbol, ; Symbol
    ledger-amount  ; Amount
]

ledger-transaction = {
    ; Transaction
    0 => ledger-transaction-id,

    ; Transaction time.
    1 => time,

    ; Depends on the transaction type.
    2 => ledger-transaction-info,
}
; end::types[]

; tag::info[]
; `ledger.transactions` endpoint.
ledger.transactions@param = ()
ledger.transactions@return = {
    ; Total number of transactions.
    0 => uint,
}
; end::info[]

; tag::list[]
; `ledger.list` endpoint for listing, filtering and sorting transactions.
ledger.list@param = {
    ; Maximum number of transactions to return. The server can still limit the number of
    ; transactions it returns if this number is high.
    ? 0 => uint,

    ; Whether or not to show the last transactions or the first ones found. The default
    ; behaviour is left to the server implementation.
    ; Ordering is done by transaction ID (which are monotonically incrementing).
    ? 1 => order,

    ; Transaction filter criteria.
    ? 2 => ledger-transaction-filter,
}
ledger.list@return = {
    ; Total number of transactions (currently). This is the same number that info
    ; would give, but it's atomic to this call.
    0 => uint,

    ; Transaction list.
    1 => [ * ledger-transaction ]
}
; end::list[]
