; tag::types[]
; Sorting order. This only matters if a call uses a maximum number of transactions
; as they will be returned in the order and stopped.
; For example, if a call lists ALL transactions, but the server returns only 100,
; using an ASCENDING order returns the first 100, while a DESCENDING order returns
; the last 100.
order = (
    indeterminate /
    ascending /
    descending
)
indeterminate = 0
ascending = 1
descending = 2

; A bound, either upper or lower, serialized.
bound<T> =
    ; Unbounded.
    []
    ; Inclusive bound.
    / [0, T]
    ; Exclusive bound.
    / [1, T]

; A Range of scalar. Must specify both bounds, but can specify any bound to being
; unbounded. If omitted, the value is unbounded.
range<T> = {
    ; Lower bound.
    ? 0 => bound<T>,
    ; Upper bound.
    ? 1 => bound<T>,
}

; A filter argument for transactions.
filter = {
    ; Filter by account affected.
    ? 0 => identity / [ * identity ],

    ; Filter by transaction type.
    ? 1 => transaction-type / [ * transaction-type ],

    ; Filter by symbol.
    ? 2 => symbol / [ * symbol ],

    ; Filter by transaction ID range.
    ? 3 => range<transaction-id>,

    ; Filter by date range.
    ? 4 => range<time>,
}

; An ID that is unique for all transactions. This must be monotonically incrementing
; between when transactions are executed.
; The system can consider this to be a `biguint` and add 1 to the last byte to gather
; the next item.
; Gaps between IDs can exist (they don't have to be continuous).
transaction-id = bstr

; Transaction types. This can be extended and the server MUST provide a list of
; those types.
; TODO: namespace transaction types per attribute ID.
transaction-type = transaction-send
                 / transaction-mint
                 / transaction-burn

transaction-send = 0
transaction-mint = 1
transaction-burn = 2

transaction = {
    ; Transaction
    0 => transaction-id,

    ; Transaction time.
    1 => time,

    ; Depends on the transaction type.
    (
        ; SEND transaction
        (
            2 => [
                transaction-send,
                identity,   ; FROM
                identity,   ; TO
                symbol,     ; Symbol
                amount     ; Amount
            ]
        )
        //

        ; MINT transaction
        (
            2 => [
                transaction-mint,
                identity,   ; Account
                symbol,     ; Symbol
                amount     ; Amount
            ]
        )
        //

        ; BURN transaction
        (
            2 => [
                transaction-burn,
                identity,   ; Account
                symbol,     ; Symbol
                amount     ; Amount
            ]
        )
    )
}

; This is also defined in 2_ledger.cddl
; An amount of tokens can be either an infinite uint or a regular one
; for simplicity. The networks CAN use either when serializing, but
; MUST accept both when doing transactions.
amount = biguint / uint
; end::types[]

; tag::info[]
; `ledger.transactions` endpoint.
transactions-arguments = ()
transactions-returns = {
    ; Total number of transactions.
    0 => uint,
}
; end::info[]

; tag::list[]
; `ledger.list` endpoint for listing, filtering and sorting transactions.
list-arguments = {
    ; Maximum number of transactions to return. The server can still limit the number of
    ; transactions it returns if this number is high.
    ? 0 => uint,

    ; Whether or not to show the last transactions or the first ones found. The default
    ; behaviour is left to the server implementation.
    ; Ordering is done by transaction ID (which are monotically incrementing).
    ? 1 => order,

    ; Transaction filter criteria.
    ? 2 => filter,
}
list-returns = {
    ; Total number of transactions (currently). This is the same number that info
    ; would give, but it's atomic to this call.
    0 => uint,

    ; Transaction list.
    1 => [ * transaction ]
}
; end::list[]

