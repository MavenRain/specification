proof@param = ()

proof@return = {
    ; Proof.  If requested, this is the set of steps constituting a proof of existence
    ; of what was requested in the state of the Merkle tree.
    ; See https://github.com/liftedinit/merk/blob/develop/docs/algorithms.md#binary-format for
    ; reference.
    0 => [ + ( node-hash / key-value-hash / key-value-pair / parent / child ) ]
}

; Represents a parent operation in a proof
parent = h'10'

; Represents a child operation in a proof
child = h'11'

; The hash of a key-value pair
key-value-hash = bstr

; The hash of a node in a proof, containing, in order, the hash
; of the key-value pair, the hash of the left child, and the hash of
; the right child
node-hash = bstr

; A node key of a proof is a collection of bytes together with its length
node-key = {
    ; The length of the key
    0 => uint,

    ; The value of the key
    1 => bstr,
}

; A node value of a proof is a collection of bytes together with its length
node-value = {
    ; The length of the value
    0 => uint,

    ; The value itself
    1 => bstr
}

; The key-value pair of a proof
key-value-pair = {
    ; The key
    0 => node-key,

    ; The value
    1 => node-value
}