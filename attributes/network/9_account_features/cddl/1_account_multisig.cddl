; Account multisig feature API.
; tag::types[]
account-role /= "canMultisigSubmit"
             /  "canMultisigApprove"

account-multisig-token = bstr

account-multisig-transaction = ledger-transaction-info

memo = tstr

; List of transaction types added by this feature.
; These should be listed in ledger.list.
ledger-transaction-info /= account-multisig-transaction-submit
                         / account-multisig-transaction-approve
                         / account-multisig-transaction-revoke
                         / account-multisig-transaction-execute
                         / account-multisig-transaction-withdraw

account-multisig-transaction-submit = {
    0 => [9, 1, 0],
    1 => non-anonymous-identity,        ; Submitter
    2 => non-anonymous-identity,        ; Account source
    ? 3 => memo,                        ; Memo of the transaction
    4 => account-multisig-transaction,  ; The transaction submitted
    5 => uint,                          ; The number of approvals needed.
    6 => time,                          ; Expiration date time.
    7 => bool,                          ; Whether to automatically execute.
    ? 8 => account-multisig-token,      ; Token created by the submission. This
                                        ; is only available in the transaction
                                        ; history.
    ? 9 => bstr .cbor any,              ; CBOR data associated with the
                                        ; transaction.
}
account-multisig-transaction-approve = {
    0 => [9, 1, 1],
    1 => non-anonymous-identity,        ; Account source
    2 => account-multisig-token,        ; Token created by the submission
    3 => non-anonymous-identity,        ; Approver
}
account-multisig-transaction-revoke = {
    0 => [9, 1, 2],
    1 => non-anonymous-identity,        ; Account source
    2 => account-multisig-token,        ; Token created by the submission
    3 => non-anonymous-identity,        ; Revoker
}
account-multisig-transaction-execute = {
    0 => [9, 1, 3],
    1 => non-anonymous-identity,        ; Account source
    2 => account-multisig-token,        ; Token created by the submission
    ? 3 => non-anonymous-identity,      ; Executer. This is omitted if the
                                        ; execution was automatic.
}
account-multisig-transaction-withdraw = {
    0 => [9, 1, 4],
    1 => non-anonymous-identity,        ; Account source
    2 => account-multisig-token,        ; Token created by the submission
    3 => non-anonymous-identity,        ; Withdrawer
}
account-multisig-transaction-set-defaults = {
    0 => [9, 1, 5],
    1 => non-anonymous-identity,        ; Instigator of the transaction.
    2 => non-anonymous-identity,        ; Account to change the multisig defaults.
    ? 3 => uint,                        ; The number of approvals needed.
    ? 4 => time,                        ; Expiration date time.
    ? 5 => bool,                        ; Whether to automatically execute.
    ? 6 => account-multisig-token,      ; Token created by the submission. This
                                        ; is only available in the transaction
                                        ; history.
}
; end::types[]

; tag::feature[]
; The feature argument when creating a new account.
multisig@account-feature@argument = {
    ; Threshold of number of approvals needed by default to execute a transaction.
    ; This number can be overridden to be greater than the default per transaction,
    ; but cannot be overridden to be less.
    ; This number includes the submitter of a transaction, meaning that the value of
    ; this field is always at least 1 (passing `0` will fail creating the account).
    ; If this value is greater than the number of people with either the
    ; `canMultisigApprove` or `canMultisigSubmit` role the server MAY still create
    ; the account.
    ; By default this is the number of identities with either the
    ; `canMultisigApprove` or `canMultisigSubmit` role.
    ? 0 => uint,

    ; The time (in seconds) a transaction would automatically expire. The server is
    ; allowed to clamp this value, or refuse to create an account if this is too
    ; large.
    ? 1 => uint,

    ; If true, transactions will be executed automatically when the threshold is
    ; met.
    ; By default the `account.multisigExecute` must be called by an owner or the
    ; creator of the transaction.
    ; Server MAY return an error if this is true and it doesn't support automatic
    ; execution.
    ? 2 => bool,
}
; end::feature[]

; tag::setDefaults[]
; Update default values for new transactions.
; The server MUST return an error if the sender does not have the `owner` role.
account.multisigSetDefaults@param = {
    ; The account to set the new defaults.
    0 => non-anonymous-identity,

    ; A new default threshold.
    ? 1 => uint,

    ; A new time (in seconds) to automatically expire transactions.
    ? 2 => uint,

    ; If true/false, update whether transactions are automatically executed.
    ; Server MAY return an error if it doesn't support automatic execution.
    ? 3 => bool,
}

account.multisigSetDefaults@return = ()
; end::setDefaults[]

; tag::submitTransaction[]
; Submit a transaction to be executed when the threshold is reached.
account.multisigSubmitTransaction@param = {
    ; The account to submit the transaction to. If omitted, the content of the
    ; transaction itself may be read to figure this out, or the server MAY
    ; return an error.
    ? 0 => non-anonymous-identity,

    ; A memo associated with the transaction. This is meant to be human readable
    ; and can be used to explain the transaction to approvers.
    ? 1 => memo,

    ; The transaction to send. Must be a valid transaction understood by the
    ; server.
    ; The _from_ field (or source) of the transaction will be used to resolve
    ; the account.
    ; Servers MAY error on an invalid or unsupported transaction type or arguments.
    2 => account-multisig-transaction,

    ; A number of approvers for this specific transaction. The server MUST return an
    ; error if this value is passed but the submitter does not have the `owner` role.
    ? 3 => uint,

    ; The time (in seconds) this transaction would automatically expire. The server is
    ; allowed to clamp this value, or refuse to create an account if this is too
    ; large. The server MUST return an error if this value is passed but the submitter
    ; does not have the `owner` role.
    ? 4 => uint,

    ; Whether to execute this transaction automatically when the threshold is met.
    ; The server MUST return an error if this value is passed but the submitter
    ; does not have the `owner` role, or if automatic execution is not supported.
    ? 5 => bool,

    ; A CBOR associated data field.
    ? 6 => bstr .cbor any,
}
account.multisigSubmitTransaction@return = {
    ; A token identifying this transaction. This is an implementation specific opaque
    ; token and can be a hash or a random or incrementing integer.
    0 => account-multisig-token,
}
; end::submitTransaction[]

; tag::info[]
; Get the information of a multisig transaction.
account.multisigInfo@param = {
    ; The token of the transaction to get the information of.
    0 => account-multisig-token,
}

account.multisigInfo@return = {
    ; Memo sent when creating the transaction. This is meant to be human readable
    ; and can be used to explain the transaction to approvers.
    ? 0 => memo,

    ; The transaction info.
    1 => account-multisig-transaction,

    ; The submitter of the transaction.
    2 => non-anonymous-identity,

    ; Approver list for this transaction, and their information.
    3 => {
        1* identity => {
            ; Whether they approved or not.
            0 => bool
        }
    }

    ; How many approvers are needed to execute this transaction.
    4 => uint,

    ; Whether to execute this transaction automatically when the threshold is met.
    5 => bool,

    ; When will this transaction expire. This is a timestamp in seconds since
    ; Unix EPOCH.
    6 => time,

    ; A CBOR associated data field.
    ? 7 => bstr .cbor any,
}
; end::info[]

; tag::approve[]
; Approve a transaction, adding the sender to the list of transaction approvals.
; Approving the same transaction twice has no effect.
; Approving a transaction that's been executed has no effect.
account.multisigApprove@param = {
    ; The token of the transaction to approve.
    0 => account-multisig-token,
}

account.multisigApprove@return = ()
; end::approve[]

; tag::revoke[]
; Revoke a transaction's approval, removing the sender to the list of transaction
; approvals. Revoking a transaction that's not been approved has no effect.
; Revoking a transaction that's been executed has no effect.
account.multisigRevoke@param = {
    ; The token of the transaction to revoke.
    0 => account-multisig-token,
}

account.multisigRevoke@return = ()
; end::revoke[]

; tag::execute[]
; Execute a transaction if all the approvals needed has been reached.
; The result is the return response of the transaction. This may include an async
; token.
; The server MUST return an error if the sender of this message does not have the
; `owner` role and is not the submitter of this transaction.
account.multisigExecute@param = {
    ; The token of the transaction to execute.
    0 => account-multisig-token,
}

account.multisigExecute@return = response
; end::execute[]

; tag::withdraw[]
; Withdraw a transaction submission. Any further action on the transaction
; should return an error (or have no effect).
; The server MUST return an error if the sender does not have the `owner` role,
; or the one who submitted the transaction.
account.multisigWithdraw@param = {
    ; The token of the transaction to withdraw.
    0 => account-multisig-token,
}

account.multisigWithdraw@return = ()
; end::withdraw[]
